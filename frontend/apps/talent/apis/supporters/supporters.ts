/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Talent Service
 * talent APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions, UseMutationResult } from "@tanstack/react-query";

import type {
  SupporterSignInBadRequestResponse,
  SupporterSignInInput,
  SupporterSignInOkResponse,
  SupporterSignUpInput,
  SupporterSignUpResponse,
} from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Supporter Sign In
 */
export type postSupporterSignInResponse200 = {
  data: SupporterSignInOkResponse;
  status: 200;
};

export type postSupporterSignInResponse400 = {
  data: SupporterSignInBadRequestResponse;
  status: 400;
};

export type postSupporterSignInResponse500 = {
  data: null;
  status: 500;
};

export type postSupporterSignInResponseComposite = postSupporterSignInResponse200 | postSupporterSignInResponse400 | postSupporterSignInResponse500;

export type postSupporterSignInResponse = postSupporterSignInResponseComposite & {
  headers: Headers;
};

export const getPostSupporterSignInUrl = () => {
  return `/supporters/sign-in`;
};

export const postSupporterSignIn = async (
  supporterSignInInput: SupporterSignInInput,
  options?: RequestInit,
): Promise<postSupporterSignInResponse> => {
  return customFetch<postSupporterSignInResponse>(getPostSupporterSignInUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(supporterSignInInput),
  });
};

export const getPostSupporterSignInMutationOptions = <TError = SupporterSignInBadRequestResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSupporterSignIn>>, TError, { data: SupporterSignInInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postSupporterSignIn>>, TError, { data: SupporterSignInInput }, TContext> => {
  const mutationKey = ["postSupporterSignIn"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupporterSignIn>>, { data: SupporterSignInInput }> = (props) => {
    const { data } = props ?? {};

    return postSupporterSignIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSupporterSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postSupporterSignIn>>>;
export type PostSupporterSignInMutationBody = SupporterSignInInput;
export type PostSupporterSignInMutationError = SupporterSignInBadRequestResponse | null;

/**
 * @summary Supporter Sign In
 */
export const usePostSupporterSignIn = <TError = SupporterSignInBadRequestResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSupporterSignIn>>, TError, { data: SupporterSignInInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postSupporterSignIn>>, TError, { data: SupporterSignInInput }, TContext> => {
  const mutationOptions = getPostSupporterSignInMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Supporter Sign Up
 */
export type postSupporterSignUpResponse200 = {
  data: SupporterSignUpResponse;
  status: 200;
};

export type postSupporterSignUpResponse400 = {
  data: SupporterSignUpResponse;
  status: 400;
};

export type postSupporterSignUpResponse500 = {
  data: null;
  status: 500;
};

export type postSupporterSignUpResponseComposite = postSupporterSignUpResponse200 | postSupporterSignUpResponse400 | postSupporterSignUpResponse500;

export type postSupporterSignUpResponse = postSupporterSignUpResponseComposite & {
  headers: Headers;
};

export const getPostSupporterSignUpUrl = () => {
  return `/supporters/sign-up`;
};

export const postSupporterSignUp = async (
  supporterSignUpInput: SupporterSignUpInput,
  options?: RequestInit,
): Promise<postSupporterSignUpResponse> => {
  const formData = new FormData();
  formData.append(`firstName`, supporterSignUpInput.firstName);
  formData.append(`lastName`, supporterSignUpInput.lastName);
  formData.append(`email`, supporterSignUpInput.email);
  formData.append(`password`, supporterSignUpInput.password);
  if (supporterSignUpInput.birthday !== undefined) {
    formData.append(`birthday`, supporterSignUpInput.birthday);
  }
  if (supporterSignUpInput.frontIdentification !== undefined) {
    formData.append(`frontIdentification`, supporterSignUpInput.frontIdentification);
  }
  if (supporterSignUpInput.backIdentification !== undefined) {
    formData.append(`backIdentification`, supporterSignUpInput.backIdentification);
  }

  return customFetch<postSupporterSignUpResponse>(getPostSupporterSignUpUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getPostSupporterSignUpMutationOptions = <TError = SupporterSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSupporterSignUp>>, TError, { data: SupporterSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postSupporterSignUp>>, TError, { data: SupporterSignUpInput }, TContext> => {
  const mutationKey = ["postSupporterSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupporterSignUp>>, { data: SupporterSignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postSupporterSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSupporterSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postSupporterSignUp>>>;
export type PostSupporterSignUpMutationBody = SupporterSignUpInput;
export type PostSupporterSignUpMutationError = SupporterSignUpResponse | null;

/**
 * @summary Supporter Sign Up
 */
export const usePostSupporterSignUp = <TError = SupporterSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSupporterSignUp>>, TError, { data: SupporterSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postSupporterSignUp>>, TError, { data: SupporterSignUpInput }, TContext> => {
  const mutationOptions = getPostSupporterSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Supporter Validate Sign Up
 */
export type postSupporterValidateSignUpResponse200 = {
  data: SupporterSignUpResponse;
  status: 200;
};

export type postSupporterValidateSignUpResponse400 = {
  data: SupporterSignUpResponse;
  status: 400;
};

export type postSupporterValidateSignUpResponse500 = {
  data: null;
  status: 500;
};

export type postSupporterValidateSignUpResponseComposite =
  | postSupporterValidateSignUpResponse200
  | postSupporterValidateSignUpResponse400
  | postSupporterValidateSignUpResponse500;

export type postSupporterValidateSignUpResponse = postSupporterValidateSignUpResponseComposite & {
  headers: Headers;
};

export const getPostSupporterValidateSignUpUrl = () => {
  return `/supporters/validate-sign-up`;
};

export const postSupporterValidateSignUp = async (
  supporterSignUpInput: SupporterSignUpInput,
  options?: RequestInit,
): Promise<postSupporterValidateSignUpResponse> => {
  const formData = new FormData();
  formData.append(`firstName`, supporterSignUpInput.firstName);
  formData.append(`lastName`, supporterSignUpInput.lastName);
  formData.append(`email`, supporterSignUpInput.email);
  formData.append(`password`, supporterSignUpInput.password);
  if (supporterSignUpInput.birthday !== undefined) {
    formData.append(`birthday`, supporterSignUpInput.birthday);
  }
  if (supporterSignUpInput.frontIdentification !== undefined) {
    formData.append(`frontIdentification`, supporterSignUpInput.frontIdentification);
  }
  if (supporterSignUpInput.backIdentification !== undefined) {
    formData.append(`backIdentification`, supporterSignUpInput.backIdentification);
  }

  return customFetch<postSupporterValidateSignUpResponse>(getPostSupporterValidateSignUpUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getPostSupporterValidateSignUpMutationOptions = <TError = SupporterSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSupporterValidateSignUp>>, TError, { data: SupporterSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postSupporterValidateSignUp>>, TError, { data: SupporterSignUpInput }, TContext> => {
  const mutationKey = ["postSupporterValidateSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSupporterValidateSignUp>>, { data: SupporterSignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postSupporterValidateSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSupporterValidateSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postSupporterValidateSignUp>>>;
export type PostSupporterValidateSignUpMutationBody = SupporterSignUpInput;
export type PostSupporterValidateSignUpMutationError = SupporterSignUpResponse | null;

/**
 * @summary Supporter Validate Sign Up
 */
export const usePostSupporterValidateSignUp = <TError = SupporterSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSupporterValidateSignUp>>, TError, { data: SupporterSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postSupporterValidateSignUp>>, TError, { data: SupporterSignUpInput }, TContext> => {
  const mutationOptions = getPostSupporterValidateSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
