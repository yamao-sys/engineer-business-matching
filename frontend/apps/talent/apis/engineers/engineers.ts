/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Talent Service
 * talent APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions, UseMutationResult } from "@tanstack/react-query";

import type { EngineerSignInInput, EngineerSignInResponse, EngineerSignUpInput, EngineerSignUpResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";
import { customFormData } from "../../../../packages/orval-config/custom-form-data";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Engineer Sign In
 */
export type postEngineerSignInResponse200 = {
  data: EngineerSignInResponse;
  status: 200;
};

export type postEngineerSignInResponse400 = {
  data: EngineerSignInResponse;
  status: 400;
};

export type postEngineerSignInResponse500 = {
  data: null;
  status: 500;
};

export type postEngineerSignInResponseComposite = postEngineerSignInResponse200 | postEngineerSignInResponse400 | postEngineerSignInResponse500;

export type postEngineerSignInResponse = postEngineerSignInResponseComposite & {
  headers: Headers;
};

export const getPostEngineerSignInUrl = () => {
  return `/engineers/sign-in`;
};

export const postEngineerSignIn = async (engineerSignInInput: EngineerSignInInput, options?: RequestInit): Promise<postEngineerSignInResponse> => {
  return customFetch<postEngineerSignInResponse>(getPostEngineerSignInUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(engineerSignInInput),
  });
};

export const getPostEngineerSignInMutationOptions = <TError = EngineerSignInResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postEngineerSignIn>>, TError, { data: EngineerSignInInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postEngineerSignIn>>, TError, { data: EngineerSignInInput }, TContext> => {
  const mutationKey = ["postEngineerSignIn"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEngineerSignIn>>, { data: EngineerSignInInput }> = (props) => {
    const { data } = props ?? {};

    return postEngineerSignIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEngineerSignInMutationResult = NonNullable<Awaited<ReturnType<typeof postEngineerSignIn>>>;
export type PostEngineerSignInMutationBody = EngineerSignInInput;
export type PostEngineerSignInMutationError = EngineerSignInResponse | null;

/**
 * @summary Engineer Sign In
 */
export const usePostEngineerSignIn = <TError = EngineerSignInResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postEngineerSignIn>>, TError, { data: EngineerSignInInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postEngineerSignIn>>, TError, { data: EngineerSignInInput }, TContext> => {
  const mutationOptions = getPostEngineerSignInMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Engineer Sign Up
 */
export type postEngineerSignUpResponse200 = {
  data: EngineerSignUpResponse;
  status: 200;
};

export type postEngineerSignUpResponse400 = {
  data: EngineerSignUpResponse;
  status: 400;
};

export type postEngineerSignUpResponse500 = {
  data: null;
  status: 500;
};

export type postEngineerSignUpResponseComposite = postEngineerSignUpResponse200 | postEngineerSignUpResponse400 | postEngineerSignUpResponse500;

export type postEngineerSignUpResponse = postEngineerSignUpResponseComposite & {
  headers: Headers;
};

export const getPostEngineerSignUpUrl = () => {
  return `/engineers/sign-up`;
};

export const postEngineerSignUp = async (engineerSignUpInput: EngineerSignUpInput, options?: RequestInit): Promise<postEngineerSignUpResponse> => {
  const formData = customFormData(engineerSignUpInput);
  return customFetch<postEngineerSignUpResponse>(getPostEngineerSignUpUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getPostEngineerSignUpMutationOptions = <TError = EngineerSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postEngineerSignUp>>, TError, { data: EngineerSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postEngineerSignUp>>, TError, { data: EngineerSignUpInput }, TContext> => {
  const mutationKey = ["postEngineerSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEngineerSignUp>>, { data: EngineerSignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postEngineerSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEngineerSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postEngineerSignUp>>>;
export type PostEngineerSignUpMutationBody = EngineerSignUpInput;
export type PostEngineerSignUpMutationError = EngineerSignUpResponse | null;

/**
 * @summary Engineer Sign Up
 */
export const usePostEngineerSignUp = <TError = EngineerSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postEngineerSignUp>>, TError, { data: EngineerSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postEngineerSignUp>>, TError, { data: EngineerSignUpInput }, TContext> => {
  const mutationOptions = getPostEngineerSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Engineer Validate Sign Up
 */
export type postEngineerValidateSignUpResponse200 = {
  data: EngineerSignUpResponse;
  status: 200;
};

export type postEngineerValidateSignUpResponse400 = {
  data: EngineerSignUpResponse;
  status: 400;
};

export type postEngineerValidateSignUpResponse500 = {
  data: null;
  status: 500;
};

export type postEngineerValidateSignUpResponseComposite =
  | postEngineerValidateSignUpResponse200
  | postEngineerValidateSignUpResponse400
  | postEngineerValidateSignUpResponse500;

export type postEngineerValidateSignUpResponse = postEngineerValidateSignUpResponseComposite & {
  headers: Headers;
};

export const getPostEngineerValidateSignUpUrl = () => {
  return `/engineers/validate-sign-up`;
};

export const postEngineerValidateSignUp = async (
  engineerSignUpInput: EngineerSignUpInput,
  options?: RequestInit,
): Promise<postEngineerValidateSignUpResponse> => {
  const formData = customFormData(engineerSignUpInput);
  return customFetch<postEngineerValidateSignUpResponse>(getPostEngineerValidateSignUpUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getPostEngineerValidateSignUpMutationOptions = <TError = EngineerSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postEngineerValidateSignUp>>, TError, { data: EngineerSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postEngineerValidateSignUp>>, TError, { data: EngineerSignUpInput }, TContext> => {
  const mutationKey = ["postEngineerValidateSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEngineerValidateSignUp>>, { data: EngineerSignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postEngineerValidateSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostEngineerValidateSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postEngineerValidateSignUp>>>;
export type PostEngineerValidateSignUpMutationBody = EngineerSignUpInput;
export type PostEngineerValidateSignUpMutationError = EngineerSignUpResponse | null;

/**
 * @summary Engineer Validate Sign Up
 */
export const usePostEngineerValidateSignUp = <TError = EngineerSignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postEngineerValidateSignUp>>, TError, { data: EngineerSignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postEngineerValidateSignUp>>, TError, { data: EngineerSignUpInput }, TContext> => {
  const mutationOptions = getPostEngineerValidateSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
