/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Business Service
 * business APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CompanyProduct, CompanyProductUpdateInput, CompanyProductUpdateResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";
import { customFormData } from "../../../../packages/orval-config/custom-form-data";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Show CompanyProduct
 */
export type getCompanyProductResponse200 = {
  data: CompanyProduct;
  status: 200;
};

export type getCompanyProductResponse404 = {
  data: null;
  status: 404;
};

export type getCompanyProductResponse500 = {
  data: null;
  status: 500;
};

export type getCompanyProductResponseComposite = getCompanyProductResponse200 | getCompanyProductResponse404 | getCompanyProductResponse500;

export type getCompanyProductResponse = getCompanyProductResponseComposite & {
  headers: Headers;
};

export const getGetCompanyProductUrl = () => {
  return `/company-products`;
};

export const getCompanyProduct = async (options?: RequestInit): Promise<getCompanyProductResponse> => {
  return customFetch<getCompanyProductResponse>(getGetCompanyProductUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetCompanyProductQueryKey = () => {
  return [`/company-products`] as const;
};

export const getGetCompanyProductQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyProduct>>, TError = null | null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyProduct>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompanyProductQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyProduct>>> = ({ signal }) => getCompanyProduct({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getCompanyProduct>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCompanyProductQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyProduct>>>;
export type GetCompanyProductQueryError = null | null;

/**
 * @summary Show CompanyProduct
 */

export function useGetCompanyProduct<TData = Awaited<ReturnType<typeof getCompanyProduct>>, TError = null | null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyProduct>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCompanyProductQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update CompanyProduct
 */
export type putCompanyProductResponse200 = {
  data: CompanyProductUpdateResponse;
  status: 200;
};

export type putCompanyProductResponse400 = {
  data: CompanyProductUpdateResponse;
  status: 400;
};

export type putCompanyProductResponse404 = {
  data: null;
  status: 404;
};

export type putCompanyProductResponse500 = {
  data: null;
  status: 500;
};

export type putCompanyProductResponseComposite =
  | putCompanyProductResponse200
  | putCompanyProductResponse400
  | putCompanyProductResponse404
  | putCompanyProductResponse500;

export type putCompanyProductResponse = putCompanyProductResponseComposite & {
  headers: Headers;
};

export const getPutCompanyProductUrl = () => {
  return `/company-products`;
};

export const putCompanyProduct = async (
  companyProductUpdateInput: CompanyProductUpdateInput,
  options?: RequestInit,
): Promise<putCompanyProductResponse> => {
  const formData = customFormData(companyProductUpdateInput);
  return customFetch<putCompanyProductResponse>(getPutCompanyProductUrl(), {
    ...options,
    method: "PUT",
    body: formData,
  });
};

export const getPutCompanyProductMutationOptions = <TError = CompanyProductUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putCompanyProduct>>, TError, { data: CompanyProductUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof putCompanyProduct>>, TError, { data: CompanyProductUpdateInput }, TContext> => {
  const mutationKey = ["putCompanyProduct"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCompanyProduct>>, { data: CompanyProductUpdateInput }> = (props) => {
    const { data } = props ?? {};

    return putCompanyProduct(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCompanyProductMutationResult = NonNullable<Awaited<ReturnType<typeof putCompanyProduct>>>;
export type PutCompanyProductMutationBody = CompanyProductUpdateInput;
export type PutCompanyProductMutationError = CompanyProductUpdateResponse | null | null;

/**
 * @summary Update CompanyProduct
 */
export const usePutCompanyProduct = <TError = CompanyProductUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putCompanyProduct>>, TError, { data: CompanyProductUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof putCompanyProduct>>, TError, { data: CompanyProductUpdateInput }, TContext> => {
  const mutationOptions = getPutCompanyProductMutationOptions(options);

  return useMutation(mutationOptions);
};
