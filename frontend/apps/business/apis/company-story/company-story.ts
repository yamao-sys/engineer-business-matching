/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Business Service
 * business APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CompanyStory, CompanyStoryUpdateInput, CompanyStoryUpdateResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Show CompanyStory
 */
export type getCompanyStoryResponse200 = {
  data: CompanyStory;
  status: 200;
};

export type getCompanyStoryResponse404 = {
  data: null;
  status: 404;
};

export type getCompanyStoryResponse500 = {
  data: null;
  status: 500;
};

export type getCompanyStoryResponseComposite = getCompanyStoryResponse200 | getCompanyStoryResponse404 | getCompanyStoryResponse500;

export type getCompanyStoryResponse = getCompanyStoryResponseComposite & {
  headers: Headers;
};

export const getGetCompanyStoryUrl = () => {
  return `/company-stories`;
};

export const getCompanyStory = async (options?: RequestInit): Promise<getCompanyStoryResponse> => {
  return customFetch<getCompanyStoryResponse>(getGetCompanyStoryUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetCompanyStoryQueryKey = () => {
  return [`/company-stories`] as const;
};

export const getGetCompanyStoryQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyStory>>, TError = null | null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyStory>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompanyStoryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyStory>>> = ({ signal }) => getCompanyStory({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getCompanyStory>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCompanyStoryQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyStory>>>;
export type GetCompanyStoryQueryError = null | null;

/**
 * @summary Show CompanyStory
 */

export function useGetCompanyStory<TData = Awaited<ReturnType<typeof getCompanyStory>>, TError = null | null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyStory>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCompanyStoryQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update CompanyStory
 */
export type putCompanyStoryResponse200 = {
  data: CompanyStoryUpdateResponse;
  status: 200;
};

export type putCompanyStoryResponse400 = {
  data: CompanyStoryUpdateResponse;
  status: 400;
};

export type putCompanyStoryResponse404 = {
  data: null;
  status: 404;
};

export type putCompanyStoryResponse500 = {
  data: null;
  status: 500;
};

export type putCompanyStoryResponseComposite =
  | putCompanyStoryResponse200
  | putCompanyStoryResponse400
  | putCompanyStoryResponse404
  | putCompanyStoryResponse500;

export type putCompanyStoryResponse = putCompanyStoryResponseComposite & {
  headers: Headers;
};

export const getPutCompanyStoryUrl = () => {
  return `/company-stories`;
};

export const putCompanyStory = async (companyStoryUpdateInput: CompanyStoryUpdateInput, options?: RequestInit): Promise<putCompanyStoryResponse> => {
  return customFetch<putCompanyStoryResponse>(getPutCompanyStoryUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(companyStoryUpdateInput),
  });
};

export const getPutCompanyStoryMutationOptions = <TError = CompanyStoryUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putCompanyStory>>, TError, { data: CompanyStoryUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof putCompanyStory>>, TError, { data: CompanyStoryUpdateInput }, TContext> => {
  const mutationKey = ["putCompanyStory"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCompanyStory>>, { data: CompanyStoryUpdateInput }> = (props) => {
    const { data } = props ?? {};

    return putCompanyStory(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCompanyStoryMutationResult = NonNullable<Awaited<ReturnType<typeof putCompanyStory>>>;
export type PutCompanyStoryMutationBody = CompanyStoryUpdateInput;
export type PutCompanyStoryMutationError = CompanyStoryUpdateResponse | null | null;

/**
 * @summary Update CompanyStory
 */
export const usePutCompanyStory = <TError = CompanyStoryUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putCompanyStory>>, TError, { data: CompanyStoryUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof putCompanyStory>>, TError, { data: CompanyStoryUpdateInput }, TContext> => {
  const mutationOptions = getPutCompanyStoryMutationOptions(options);

  return useMutation(mutationOptions);
};
