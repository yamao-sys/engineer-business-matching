/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Business Service
 * business APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions, UseMutationResult } from "@tanstack/react-query";

import type { CompanySignInInput, CompanySignInResponse, CompanySignUpInput, CompanySignUpResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";
import { customFormData } from "../../../../packages/orval-config/custom-form-data";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Company Sign In
 */
export type postCompanySignInResponse200 = {
  data: CompanySignInResponse;
  status: 200;
};

export type postCompanySignInResponse400 = {
  data: CompanySignInResponse;
  status: 400;
};

export type postCompanySignInResponse500 = {
  data: null;
  status: 500;
};

export type postCompanySignInResponseComposite = postCompanySignInResponse200 | postCompanySignInResponse400 | postCompanySignInResponse500;

export type postCompanySignInResponse = postCompanySignInResponseComposite & {
  headers: Headers;
};

export const getPostCompanySignInUrl = () => {
  return `/companies/sign-in`;
};

export const postCompanySignIn = async (companySignInInput: CompanySignInInput, options?: RequestInit): Promise<postCompanySignInResponse> => {
  return customFetch<postCompanySignInResponse>(getPostCompanySignInUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(companySignInInput),
  });
};

export const getPostCompanySignInMutationOptions = <TError = CompanySignInResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanySignIn>>, TError, { data: CompanySignInInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postCompanySignIn>>, TError, { data: CompanySignInInput }, TContext> => {
  const mutationKey = ["postCompanySignIn"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCompanySignIn>>, { data: CompanySignInInput }> = (props) => {
    const { data } = props ?? {};

    return postCompanySignIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCompanySignInMutationResult = NonNullable<Awaited<ReturnType<typeof postCompanySignIn>>>;
export type PostCompanySignInMutationBody = CompanySignInInput;
export type PostCompanySignInMutationError = CompanySignInResponse | null;

/**
 * @summary Company Sign In
 */
export const usePostCompanySignIn = <TError = CompanySignInResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanySignIn>>, TError, { data: CompanySignInInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postCompanySignIn>>, TError, { data: CompanySignInInput }, TContext> => {
  const mutationOptions = getPostCompanySignInMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Company Sign Up
 */
export type postCompanySignUpResponse200 = {
  data: CompanySignUpResponse;
  status: 200;
};

export type postCompanySignUpResponse400 = {
  data: CompanySignUpResponse;
  status: 400;
};

export type postCompanySignUpResponse500 = {
  data: null;
  status: 500;
};

export type postCompanySignUpResponseComposite = postCompanySignUpResponse200 | postCompanySignUpResponse400 | postCompanySignUpResponse500;

export type postCompanySignUpResponse = postCompanySignUpResponseComposite & {
  headers: Headers;
};

export const getPostCompanySignUpUrl = () => {
  return `/companies/sign-up`;
};

export const postCompanySignUp = async (companySignUpInput: CompanySignUpInput, options?: RequestInit): Promise<postCompanySignUpResponse> => {
  const formData = customFormData(companySignUpInput);
  return customFetch<postCompanySignUpResponse>(getPostCompanySignUpUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getPostCompanySignUpMutationOptions = <TError = CompanySignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanySignUp>>, TError, { data: CompanySignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postCompanySignUp>>, TError, { data: CompanySignUpInput }, TContext> => {
  const mutationKey = ["postCompanySignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCompanySignUp>>, { data: CompanySignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postCompanySignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCompanySignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postCompanySignUp>>>;
export type PostCompanySignUpMutationBody = CompanySignUpInput;
export type PostCompanySignUpMutationError = CompanySignUpResponse | null;

/**
 * @summary Company Sign Up
 */
export const usePostCompanySignUp = <TError = CompanySignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanySignUp>>, TError, { data: CompanySignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postCompanySignUp>>, TError, { data: CompanySignUpInput }, TContext> => {
  const mutationOptions = getPostCompanySignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Company Validate Sign Up
 */
export type postCompanyValidateSignUpResponse200 = {
  data: CompanySignUpResponse;
  status: 200;
};

export type postCompanyValidateSignUpResponse400 = {
  data: CompanySignUpResponse;
  status: 400;
};

export type postCompanyValidateSignUpResponse500 = {
  data: null;
  status: 500;
};

export type postCompanyValidateSignUpResponseComposite =
  | postCompanyValidateSignUpResponse200
  | postCompanyValidateSignUpResponse400
  | postCompanyValidateSignUpResponse500;

export type postCompanyValidateSignUpResponse = postCompanyValidateSignUpResponseComposite & {
  headers: Headers;
};

export const getPostCompanyValidateSignUpUrl = () => {
  return `/companies/validate-sign-up`;
};

export const postCompanyValidateSignUp = async (
  companySignUpInput: CompanySignUpInput,
  options?: RequestInit,
): Promise<postCompanyValidateSignUpResponse> => {
  const formData = customFormData(companySignUpInput);
  return customFetch<postCompanyValidateSignUpResponse>(getPostCompanyValidateSignUpUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getPostCompanyValidateSignUpMutationOptions = <TError = CompanySignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanyValidateSignUp>>, TError, { data: CompanySignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postCompanyValidateSignUp>>, TError, { data: CompanySignUpInput }, TContext> => {
  const mutationKey = ["postCompanyValidateSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCompanyValidateSignUp>>, { data: CompanySignUpInput }> = (props) => {
    const { data } = props ?? {};

    return postCompanyValidateSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCompanyValidateSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof postCompanyValidateSignUp>>>;
export type PostCompanyValidateSignUpMutationBody = CompanySignUpInput;
export type PostCompanyValidateSignUpMutationError = CompanySignUpResponse | null;

/**
 * @summary Company Validate Sign Up
 */
export const usePostCompanyValidateSignUp = <TError = CompanySignUpResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanyValidateSignUp>>, TError, { data: CompanySignUpInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postCompanyValidateSignUp>>, TError, { data: CompanySignUpInput }, TContext> => {
  const mutationOptions = getPostCompanyValidateSignUpMutationOptions(options);

  return useMutation(mutationOptions);
};
