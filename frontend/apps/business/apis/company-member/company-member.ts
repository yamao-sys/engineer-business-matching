/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Business Service
 * business APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CompanyMember, CompanyMemberUpdateInput, CompanyMemberUpdateResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";
import { customFormData } from "../../../../packages/orval-config/custom-form-data";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Fetch CompanyMembers
 */
export type getCompanyMembersResponse200 = {
  data: CompanyMember[];
  status: 200;
};

export type getCompanyMembersResponse500 = {
  data: null;
  status: 500;
};

export type getCompanyMembersResponseComposite = getCompanyMembersResponse200 | getCompanyMembersResponse500;

export type getCompanyMembersResponse = getCompanyMembersResponseComposite & {
  headers: Headers;
};

export const getGetCompanyMembersUrl = () => {
  return `/company-members/`;
};

export const getCompanyMembers = async (options?: RequestInit): Promise<getCompanyMembersResponse> => {
  return customFetch<getCompanyMembersResponse>(getGetCompanyMembersUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetCompanyMembersQueryKey = () => {
  return [`/company-members/`] as const;
};

export const getGetCompanyMembersQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyMembers>>, TError = null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompanyMembersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyMembers>>> = ({ signal }) => getCompanyMembers({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCompanyMembersQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyMembers>>>;
export type GetCompanyMembersQueryError = null;

/**
 * @summary Fetch CompanyMembers
 */

export function useGetCompanyMembers<TData = Awaited<ReturnType<typeof getCompanyMembers>>, TError = null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyMembers>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCompanyMembersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create CompanyMember
 */
export type postCompanyMemberResponse200 = {
  data: CompanyMemberUpdateResponse;
  status: 200;
};

export type postCompanyMemberResponse400 = {
  data: CompanyMemberUpdateResponse;
  status: 400;
};

export type postCompanyMemberResponse500 = {
  data: null;
  status: 500;
};

export type postCompanyMemberResponseComposite = postCompanyMemberResponse200 | postCompanyMemberResponse400 | postCompanyMemberResponse500;

export type postCompanyMemberResponse = postCompanyMemberResponseComposite & {
  headers: Headers;
};

export const getPostCompanyMemberUrl = () => {
  return `/company-members/`;
};

export const postCompanyMember = async (
  companyMemberUpdateInput: CompanyMemberUpdateInput,
  options?: RequestInit,
): Promise<postCompanyMemberResponse> => {
  const formData = customFormData(companyMemberUpdateInput);
  return customFetch<postCompanyMemberResponse>(getPostCompanyMemberUrl(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getPostCompanyMemberMutationOptions = <TError = CompanyMemberUpdateResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanyMember>>, TError, { data: CompanyMemberUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postCompanyMember>>, TError, { data: CompanyMemberUpdateInput }, TContext> => {
  const mutationKey = ["postCompanyMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCompanyMember>>, { data: CompanyMemberUpdateInput }> = (props) => {
    const { data } = props ?? {};

    return postCompanyMember(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCompanyMemberMutationResult = NonNullable<Awaited<ReturnType<typeof postCompanyMember>>>;
export type PostCompanyMemberMutationBody = CompanyMemberUpdateInput;
export type PostCompanyMemberMutationError = CompanyMemberUpdateResponse | null;

/**
 * @summary Create CompanyMember
 */
export const usePostCompanyMember = <TError = CompanyMemberUpdateResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postCompanyMember>>, TError, { data: CompanyMemberUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postCompanyMember>>, TError, { data: CompanyMemberUpdateInput }, TContext> => {
  const mutationOptions = getPostCompanyMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Show CompanyMember
 */
export type getCompanyMemberResponse200 = {
  data: CompanyMember;
  status: 200;
};

export type getCompanyMemberResponse404 = {
  data: null;
  status: 404;
};

export type getCompanyMemberResponse500 = {
  data: null;
  status: 500;
};

export type getCompanyMemberResponseComposite = getCompanyMemberResponse200 | getCompanyMemberResponse404 | getCompanyMemberResponse500;

export type getCompanyMemberResponse = getCompanyMemberResponseComposite & {
  headers: Headers;
};

export const getGetCompanyMemberUrl = (id: string) => {
  return `/company-members/${id}`;
};

export const getCompanyMember = async (id: string, options?: RequestInit): Promise<getCompanyMemberResponse> => {
  return customFetch<getCompanyMemberResponse>(getGetCompanyMemberUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetCompanyMemberQueryKey = (id?: string) => {
  return [`/company-members/${id}`] as const;
};

export const getGetCompanyMemberQueryOptions = <TData = Awaited<ReturnType<typeof getCompanyMember>>, TError = null | null>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyMember>>, TError, TData>; request?: SecondParameter<typeof customFetch> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompanyMemberQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompanyMember>>> = ({ signal }) => getCompanyMember(id, { signal, ...requestOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getCompanyMember>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCompanyMemberQueryResult = NonNullable<Awaited<ReturnType<typeof getCompanyMember>>>;
export type GetCompanyMemberQueryError = null | null;

/**
 * @summary Show CompanyMember
 */

export function useGetCompanyMember<TData = Awaited<ReturnType<typeof getCompanyMember>>, TError = null | null>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCompanyMember>>, TError, TData>; request?: SecondParameter<typeof customFetch> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCompanyMemberQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update CompanyMember
 */
export type putCompanyMemberResponse200 = {
  data: CompanyMemberUpdateResponse;
  status: 200;
};

export type putCompanyMemberResponse400 = {
  data: CompanyMemberUpdateResponse;
  status: 400;
};

export type putCompanyMemberResponse404 = {
  data: null;
  status: 404;
};

export type putCompanyMemberResponse500 = {
  data: null;
  status: 500;
};

export type putCompanyMemberResponseComposite =
  | putCompanyMemberResponse200
  | putCompanyMemberResponse400
  | putCompanyMemberResponse404
  | putCompanyMemberResponse500;

export type putCompanyMemberResponse = putCompanyMemberResponseComposite & {
  headers: Headers;
};

export const getPutCompanyMemberUrl = (id: string) => {
  return `/company-members/${id}`;
};

export const putCompanyMember = async (
  id: string,
  companyMemberUpdateInput: CompanyMemberUpdateInput,
  options?: RequestInit,
): Promise<putCompanyMemberResponse> => {
  const formData = customFormData(companyMemberUpdateInput);
  return customFetch<putCompanyMemberResponse>(getPutCompanyMemberUrl(id), {
    ...options,
    method: "PUT",
    body: formData,
  });
};

export const getPutCompanyMemberMutationOptions = <TError = CompanyMemberUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putCompanyMember>>, TError, { id: string; data: CompanyMemberUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof putCompanyMember>>, TError, { id: string; data: CompanyMemberUpdateInput }, TContext> => {
  const mutationKey = ["putCompanyMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCompanyMember>>, { id: string; data: CompanyMemberUpdateInput }> = (props) => {
    const { id, data } = props ?? {};

    return putCompanyMember(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCompanyMemberMutationResult = NonNullable<Awaited<ReturnType<typeof putCompanyMember>>>;
export type PutCompanyMemberMutationBody = CompanyMemberUpdateInput;
export type PutCompanyMemberMutationError = CompanyMemberUpdateResponse | null | null;

/**
 * @summary Update CompanyMember
 */
export const usePutCompanyMember = <TError = CompanyMemberUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putCompanyMember>>, TError, { id: string; data: CompanyMemberUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof putCompanyMember>>, TError, { id: string; data: CompanyMemberUpdateInput }, TContext> => {
  const mutationOptions = getPutCompanyMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete CompanyMember
 */
export type deleteCompanyMemberResponse200 = {
  data: CompanyMember;
  status: 200;
};

export type deleteCompanyMemberResponse404 = {
  data: null;
  status: 404;
};

export type deleteCompanyMemberResponse500 = {
  data: null;
  status: 500;
};

export type deleteCompanyMemberResponseComposite = deleteCompanyMemberResponse200 | deleteCompanyMemberResponse404 | deleteCompanyMemberResponse500;

export type deleteCompanyMemberResponse = deleteCompanyMemberResponseComposite & {
  headers: Headers;
};

export const getDeleteCompanyMemberUrl = (id: string) => {
  return `/company-members/${id}`;
};

export const deleteCompanyMember = async (id: string, options?: RequestInit): Promise<deleteCompanyMemberResponse> => {
  return customFetch<deleteCompanyMemberResponse>(getDeleteCompanyMemberUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteCompanyMemberMutationOptions = <TError = null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyMember>>, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyMember>>, TError, { id: string }, TContext> => {
  const mutationKey = ["deleteCompanyMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCompanyMember>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return deleteCompanyMember(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCompanyMemberMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCompanyMember>>>;

export type DeleteCompanyMemberMutationError = null | null;

/**
 * @summary Delete CompanyMember
 */
export const useDeleteCompanyMember = <TError = null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteCompanyMember>>, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteCompanyMember>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteCompanyMemberMutationOptions(options);

  return useMutation(mutationOptions);
};
