/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Business Service
 * business APIs
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type { QueryFunction, QueryKey, UseQueryOptions, UseQueryResult } from "@tanstack/react-query";

import type { CsrfResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get Csrf
 */
export type getCsrfResponse200 = {
  data: CsrfResponse;
  status: 200;
};

export type getCsrfResponse500 = {
  data: null;
  status: 500;
};

export type getCsrfResponseComposite = getCsrfResponse200 | getCsrfResponse500;

export type getCsrfResponse = getCsrfResponseComposite & {
  headers: Headers;
};

export const getGetCsrfUrl = () => {
  return `/csrf`;
};

export const getCsrf = async (options?: RequestInit): Promise<getCsrfResponse> => {
  return customFetch<getCsrfResponse>(getGetCsrfUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetCsrfQueryKey = () => {
  return [`/csrf`] as const;
};

export const getGetCsrfQueryOptions = <TData = Awaited<ReturnType<typeof getCsrf>>, TError = null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCsrfQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCsrf>>> = ({ signal }) => getCsrf({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData> & { queryKey: QueryKey };
};

export type GetCsrfQueryResult = NonNullable<Awaited<ReturnType<typeof getCsrf>>>;
export type GetCsrfQueryError = null;

/**
 * @summary Get Csrf
 */

export function useGetCsrf<TData = Awaited<ReturnType<typeof getCsrf>>, TError = null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCsrf>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCsrfQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
