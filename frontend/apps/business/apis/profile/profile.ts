/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Business Service
 * business APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Profile, ProfileUpdateInput, ProfileUpdateResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";
import { customFormData } from "../../../../packages/orval-config/custom-form-data";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Show Profile
 */
export type getProfileResponse200 = {
  data: Profile;
  status: 200;
};

export type getProfileResponse404 = {
  data: null;
  status: 404;
};

export type getProfileResponse500 = {
  data: null;
  status: 500;
};

export type getProfileResponseComposite = getProfileResponse200 | getProfileResponse404 | getProfileResponse500;

export type getProfileResponse = getProfileResponseComposite & {
  headers: Headers;
};

export const getGetProfileUrl = () => {
  return `/profile`;
};

export const getProfile = async (options?: RequestInit): Promise<getProfileResponse> => {
  return customFetch<getProfileResponse>(getGetProfileUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetProfileQueryKey = () => {
  return [`/profile`] as const;
};

export const getGetProfileQueryOptions = <TData = Awaited<ReturnType<typeof getProfile>>, TError = null | null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfile>>> = ({ signal }) => getProfile({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData> & { queryKey: QueryKey };
};

export type GetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getProfile>>>;
export type GetProfileQueryError = null | null;

/**
 * @summary Show Profile
 */

export function useGetProfile<TData = Awaited<ReturnType<typeof getProfile>>, TError = null | null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getProfile>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetProfileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update profile
 */
export type putProfileResponse200 = {
  data: ProfileUpdateResponse;
  status: 200;
};

export type putProfileResponse400 = {
  data: ProfileUpdateResponse;
  status: 400;
};

export type putProfileResponse404 = {
  data: null;
  status: 404;
};

export type putProfileResponse500 = {
  data: null;
  status: 500;
};

export type putProfileResponseComposite = putProfileResponse200 | putProfileResponse400 | putProfileResponse404 | putProfileResponse500;

export type putProfileResponse = putProfileResponseComposite & {
  headers: Headers;
};

export const getPutProfileUrl = () => {
  return `/profile`;
};

export const putProfile = async (profileUpdateInput: ProfileUpdateInput, options?: RequestInit): Promise<putProfileResponse> => {
  const formData = customFormData(profileUpdateInput);
  return customFetch<putProfileResponse>(getPutProfileUrl(), {
    ...options,
    method: "PUT",
    body: formData,
  });
};

export const getPutProfileMutationOptions = <TError = ProfileUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putProfile>>, TError, { data: ProfileUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof putProfile>>, TError, { data: ProfileUpdateInput }, TContext> => {
  const mutationKey = ["putProfile"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProfile>>, { data: ProfileUpdateInput }> = (props) => {
    const { data } = props ?? {};

    return putProfile(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutProfileMutationResult = NonNullable<Awaited<ReturnType<typeof putProfile>>>;
export type PutProfileMutationBody = ProfileUpdateInput;
export type PutProfileMutationError = ProfileUpdateResponse | null | null;

/**
 * @summary Update profile
 */
export const usePutProfile = <TError = ProfileUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putProfile>>, TError, { data: ProfileUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof putProfile>>, TError, { data: ProfileUpdateInput }, TContext> => {
  const mutationOptions = getPutProfileMutationOptions(options);

  return useMutation(mutationOptions);
};
