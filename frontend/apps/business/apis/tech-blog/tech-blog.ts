/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Business Service
 * business APIs
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { TechBlog, TechBlogUpdateInput, TechBlogUpdateResponse } from ".././model";

import { customFetch } from "../../../../packages/orval-config/custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Fetch TechBlogs
 */
export type getTechBlogsResponse200 = {
  data: TechBlog[];
  status: 200;
};

export type getTechBlogsResponse500 = {
  data: null;
  status: 500;
};

export type getTechBlogsResponseComposite = getTechBlogsResponse200 | getTechBlogsResponse500;

export type getTechBlogsResponse = getTechBlogsResponseComposite & {
  headers: Headers;
};

export const getGetTechBlogsUrl = () => {
  return `/tech-blogs/`;
};

export const getTechBlogs = async (options?: RequestInit): Promise<getTechBlogsResponse> => {
  return customFetch<getTechBlogsResponse>(getGetTechBlogsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetTechBlogsQueryKey = () => {
  return [`/tech-blogs/`] as const;
};

export const getGetTechBlogsQueryOptions = <TData = Awaited<ReturnType<typeof getTechBlogs>>, TError = null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTechBlogs>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTechBlogsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTechBlogs>>> = ({ signal }) => getTechBlogs({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getTechBlogs>>, TError, TData> & { queryKey: QueryKey };
};

export type GetTechBlogsQueryResult = NonNullable<Awaited<ReturnType<typeof getTechBlogs>>>;
export type GetTechBlogsQueryError = null;

/**
 * @summary Fetch TechBlogs
 */

export function useGetTechBlogs<TData = Awaited<ReturnType<typeof getTechBlogs>>, TError = null>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTechBlogs>>, TError, TData>;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTechBlogsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create TechBlog
 */
export type postTechBlogResponse200 = {
  data: TechBlogUpdateResponse;
  status: 200;
};

export type postTechBlogResponse400 = {
  data: TechBlogUpdateResponse;
  status: 400;
};

export type postTechBlogResponse500 = {
  data: null;
  status: 500;
};

export type postTechBlogResponseComposite = postTechBlogResponse200 | postTechBlogResponse400 | postTechBlogResponse500;

export type postTechBlogResponse = postTechBlogResponseComposite & {
  headers: Headers;
};

export const getPostTechBlogUrl = () => {
  return `/tech-blogs/`;
};

export const postTechBlog = async (techBlogUpdateInput: TechBlogUpdateInput, options?: RequestInit): Promise<postTechBlogResponse> => {
  return customFetch<postTechBlogResponse>(getPostTechBlogUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(techBlogUpdateInput),
  });
};

export const getPostTechBlogMutationOptions = <TError = TechBlogUpdateResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTechBlog>>, TError, { data: TechBlogUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof postTechBlog>>, TError, { data: TechBlogUpdateInput }, TContext> => {
  const mutationKey = ["postTechBlog"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTechBlog>>, { data: TechBlogUpdateInput }> = (props) => {
    const { data } = props ?? {};

    return postTechBlog(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTechBlogMutationResult = NonNullable<Awaited<ReturnType<typeof postTechBlog>>>;
export type PostTechBlogMutationBody = TechBlogUpdateInput;
export type PostTechBlogMutationError = TechBlogUpdateResponse | null;

/**
 * @summary Create TechBlog
 */
export const usePostTechBlog = <TError = TechBlogUpdateResponse | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTechBlog>>, TError, { data: TechBlogUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof postTechBlog>>, TError, { data: TechBlogUpdateInput }, TContext> => {
  const mutationOptions = getPostTechBlogMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Show TechBlog
 */
export type getTechBlogResponse200 = {
  data: TechBlog;
  status: 200;
};

export type getTechBlogResponse404 = {
  data: null;
  status: 404;
};

export type getTechBlogResponse500 = {
  data: null;
  status: 500;
};

export type getTechBlogResponseComposite = getTechBlogResponse200 | getTechBlogResponse404 | getTechBlogResponse500;

export type getTechBlogResponse = getTechBlogResponseComposite & {
  headers: Headers;
};

export const getGetTechBlogUrl = (id: string) => {
  return `/tech-blogs/${id}`;
};

export const getTechBlog = async (id: string, options?: RequestInit): Promise<getTechBlogResponse> => {
  return customFetch<getTechBlogResponse>(getGetTechBlogUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetTechBlogQueryKey = (id?: string) => {
  return [`/tech-blogs/${id}`] as const;
};

export const getGetTechBlogQueryOptions = <TData = Awaited<ReturnType<typeof getTechBlog>>, TError = null | null>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getTechBlog>>, TError, TData>; request?: SecondParameter<typeof customFetch> },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTechBlogQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTechBlog>>> = ({ signal }) => getTechBlog(id, { signal, ...requestOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getTechBlog>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetTechBlogQueryResult = NonNullable<Awaited<ReturnType<typeof getTechBlog>>>;
export type GetTechBlogQueryError = null | null;

/**
 * @summary Show TechBlog
 */

export function useGetTechBlog<TData = Awaited<ReturnType<typeof getTechBlog>>, TError = null | null>(
  id: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getTechBlog>>, TError, TData>; request?: SecondParameter<typeof customFetch> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTechBlogQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update TechBlog
 */
export type putTechBlogResponse200 = {
  data: TechBlogUpdateResponse;
  status: 200;
};

export type putTechBlogResponse400 = {
  data: TechBlogUpdateResponse;
  status: 400;
};

export type putTechBlogResponse404 = {
  data: null;
  status: 404;
};

export type putTechBlogResponse500 = {
  data: null;
  status: 500;
};

export type putTechBlogResponseComposite = putTechBlogResponse200 | putTechBlogResponse400 | putTechBlogResponse404 | putTechBlogResponse500;

export type putTechBlogResponse = putTechBlogResponseComposite & {
  headers: Headers;
};

export const getPutTechBlogUrl = (id: string) => {
  return `/tech-blogs/${id}`;
};

export const putTechBlog = async (id: string, techBlogUpdateInput: TechBlogUpdateInput, options?: RequestInit): Promise<putTechBlogResponse> => {
  return customFetch<putTechBlogResponse>(getPutTechBlogUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(techBlogUpdateInput),
  });
};

export const getPutTechBlogMutationOptions = <TError = TechBlogUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putTechBlog>>, TError, { id: string; data: TechBlogUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof putTechBlog>>, TError, { id: string; data: TechBlogUpdateInput }, TContext> => {
  const mutationKey = ["putTechBlog"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTechBlog>>, { id: string; data: TechBlogUpdateInput }> = (props) => {
    const { id, data } = props ?? {};

    return putTechBlog(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutTechBlogMutationResult = NonNullable<Awaited<ReturnType<typeof putTechBlog>>>;
export type PutTechBlogMutationBody = TechBlogUpdateInput;
export type PutTechBlogMutationError = TechBlogUpdateResponse | null | null;

/**
 * @summary Update TechBlog
 */
export const usePutTechBlog = <TError = TechBlogUpdateResponse | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putTechBlog>>, TError, { id: string; data: TechBlogUpdateInput }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof putTechBlog>>, TError, { id: string; data: TechBlogUpdateInput }, TContext> => {
  const mutationOptions = getPutTechBlogMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete TechBlog
 */
export type deleteTechBlogResponse200 = {
  data: TechBlog;
  status: 200;
};

export type deleteTechBlogResponse404 = {
  data: null;
  status: 404;
};

export type deleteTechBlogResponse500 = {
  data: null;
  status: 500;
};

export type deleteTechBlogResponseComposite = deleteTechBlogResponse200 | deleteTechBlogResponse404 | deleteTechBlogResponse500;

export type deleteTechBlogResponse = deleteTechBlogResponseComposite & {
  headers: Headers;
};

export const getDeleteTechBlogUrl = (id: string) => {
  return `/tech-blogs/${id}`;
};

export const deleteTechBlog = async (id: string, options?: RequestInit): Promise<deleteTechBlogResponse> => {
  return customFetch<deleteTechBlogResponse>(getDeleteTechBlogUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteTechBlogMutationOptions = <TError = null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTechBlog>>, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTechBlog>>, TError, { id: string }, TContext> => {
  const mutationKey = ["deleteTechBlog"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTechBlog>>, { id: string }> = (props) => {
    const { id } = props ?? {};

    return deleteTechBlog(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTechBlogMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTechBlog>>>;

export type DeleteTechBlogMutationError = null | null;

/**
 * @summary Delete TechBlog
 */
export const useDeleteTechBlog = <TError = null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTechBlog>>, TError, { id: string }, TContext>;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<Awaited<ReturnType<typeof deleteTechBlog>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteTechBlogMutationOptions(options);

  return useMutation(mutationOptions);
};
